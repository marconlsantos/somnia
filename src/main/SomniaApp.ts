import { Dream } from "@prisma/client";
import { App, BrowserWindow, dialog, ipcMain, IpcMainInvokeEvent, Menu } from "electron";
import { rm } from "fs/promises";
import DreamRepository from "../Repositories/DreamRepository";
import MainWindow from "./MainWindow";

// This allows TypeScript to pick up the magic constant that"s auto-generated by Forge"s Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you"re running in development or production).
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

export default class SomniaApp {
    static application: Electron.App;
    static mainWindow: MainWindow;

    static isMac = process.platform === "darwin";

    static currentDb: string[] | undefined = [];

    private static onReady() {
        console.debug("[Somnia] Application onReady executing");

        if (SomniaApp.isMac) {
            const menu = Menu.buildFromTemplate(SomniaApp.getOsXMenu());
            Menu.setApplicationMenu(menu);
        }

        SomniaApp.setIpcMainHandlers();

        SomniaApp.openFile();
    }

    private static async newFile() {
        const dialogValue = await dialog.showSaveDialog({
            title: "New diary",
            message: "Please enter new diary name",
            properties: ["createDirectory", "showOverwriteConfirmation"],
            filters: [
                { name: "SQLite databases", extensions: ["sqlite"] }
            ]
        });

        if (!dialogValue || !dialogValue.filePath || !dialogValue.filePath.length) {
            return;
        }

        await rm(dialogValue.filePath);

        await DreamRepository.applyMigrations(dialogValue.filePath);

        DreamRepository.setDatabase(dialogValue.filePath);

        if (SomniaApp.mainWindow) {
            SomniaApp.mainWindow.close();
        }

        // Create the browser window.
        SomniaApp.createMainWindow();
    }

    private static async openFile() {
        SomniaApp.currentDb = dialog.showOpenDialogSync({
            title: "Open diary",
            message: "Select dream diary to open",
            properties: ["openFile", "createDirectory"],
            filters: [
                { name: "SQLite databases", extensions: ["sqlite"] },
                { name: "All Files", extensions: ["*"] }
            ]
        });

        if (!SomniaApp.currentDb || !SomniaApp.currentDb.length) {
            return;
        }

        DreamRepository.setDatabase(SomniaApp.currentDb[0]);

        if (SomniaApp.mainWindow) {
            SomniaApp.mainWindow.close();
        }

        // Create the browser window.
        SomniaApp.createMainWindow();
    }

    private static setIpcMainHandlers() {
        console.debug("[Somnia] Setting IPC Main handlers");

        ipcMain.handle('main:getDreamPage', SomniaApp.handleGetDreamPage);
        ipcMain.handle('main:getDreamPageCount', SomniaApp.handleGetDreamPageCount);
        ipcMain.handle('main:deleteDream', SomniaApp.handleDeleteDream);
        ipcMain.handle('main:saveDream', SomniaApp.handleSaveDream);
        ipcMain.handle('main:getDream', SomniaApp.handleGetDream);
    }

    private static async handleGetDreamPage(event: IpcMainInvokeEvent,
        searchFilter: string,
        pageSize: number,
        currentPage: number): Promise<Dream[]> {
        const dreamRepository = new DreamRepository();

        return await dreamRepository.getPage(searchFilter, pageSize, currentPage);
    }

    private static async handleGetDreamPageCount(event: IpcMainInvokeEvent,
        searchFilter: string,
        pageSize: number): Promise<number> {
        const dreamRepository = new DreamRepository();

        return await dreamRepository.getPageCount(searchFilter, pageSize);
    }

    private static async handleDeleteDream(event: IpcMainInvokeEvent, dreamId: number): Promise<boolean> {
        const dreamRepository = new DreamRepository();

        return await dreamRepository.deleteDream(dreamId);
    }

    private static async handleSaveDream(event: IpcMainInvokeEvent, dream: Dream): Promise<boolean> {
        const dreamRepository = new DreamRepository();

        return await dreamRepository.saveDream(dream);
    }

    private static async handleGetDream(event: IpcMainInvokeEvent, id: number): Promise<Dream | null> {
        const dreamRepository = new DreamRepository();

        return await dreamRepository.getDream(id);
    }

    private static createMainWindow() {
        SomniaApp.mainWindow = new MainWindow({
            width: 1281,
            height: 854,
            minWidth: 800,
            minHeight: 600,
            icon: "../assets/somnia.png",
            webPreferences: {
                preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            }
        });

        // and load the index.html of the app.
        SomniaApp.mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

        // Open the DevTools.
        SomniaApp.mainWindow.webContents.openDevTools();
    }

    private static getOsXMenu(): (Electron.MenuItemConstructorOptions | Electron.MenuItem)[] {
        return [
            {
                label: SomniaApp.name,
                submenu: [
                    { role: "services" },
                    { type: "separator" },
                    { role: "quit" }
                ]
            },
            {
                role: "fileMenu",
                submenu: [
                    {
                        label: "New...",
                        accelerator: 'Cmd+N',
                        click: SomniaApp.newFile
                    },
                    {
                        label: "Open...",
                        accelerator: 'Cmd+O',
                        click: SomniaApp.openFile
                    }
                ]
            }
        ];
    }

    private static onActivate() {
        console.debug("[Somnia] Application onActivate executing");

        // On OS X it's common to re-create a window in the app when the
        // dock icon is clicked and there are no other windows open.
        if (BrowserWindow.getAllWindows().length === 0) {
            SomniaApp.openFile();
        }
    }

    private static onWindowAllClosed() {
        console.debug("[Somnia] Application onWindowAllClosed executing");

        if (process.platform !== "darwin") {
            SomniaApp.application.quit();
        }
    }

    static main(app: App) {
        console.debug("[Somnia] Application starting");

        SomniaApp.application = app;

        SomniaApp.application.on("ready", this.onReady);
        SomniaApp.application.on("window-all-closed", this.onWindowAllClosed);
        SomniaApp.application.on("activate", this.onActivate);
    }
}
